export function initClick2Dial(makeCall) {
    
    var $UC = $UC || {};

    $UC.Phone = function $UC$Phone(_c, _a, _p, _e, _d) {
        var _r = $UC.Resources;
        _p = $UC.PhoneParse.cleanPhone(_p);

        var _images = {
            C1: 221, C7: 172, C32: 20, C86: 44, C57: 45, C33: 74, C49: 80, C36: 96, C41: 202, C39: 105, C972: 104,
            C52: 136, C31: 147, C351: 168, C966: 182, C34: 196, C46: 201, C44: 83, C971: 219
        }

        var _imageoverride = {
            C1:
            [
            { A: "403, 587, 780, 604, 778, 250, 204, 506, 709, 867, 902, 905, 289, 519, 226, 705, 249, 613, 343, 807, 416, 647, 418, 581, 450, 579, 514, 438, 819, 306", I: 38 },
            { A: "684", I: 4 },
            { A: "264", I: 7 },
            { A: "268", I: 8 },
            { A: "242", I: 15 },
            { A: "246", I: 18 },
            { A: "441", I: 23 },
            { A: "284", I: 30 },
            { A: "345", I: 40 },
            { A: "767", I: 58 },
            { A: "809, 829, 849", I: 59 },
            { A: "473", I: 86 },
            { A: "671", I: 87 },
            { A: "876", I: 106 },
            { A: "664", I: 141 },
            { A: "670", I: 156 },
            { A: "787, 939", I: 169 },
            { A: "869", I: 175 },
            { A: "758", I: 176 },
            { A: "784", I: 178 },
            { A: "721", I: 78 },
            { A: "868", I: 211 },
            { A: "649", I: 215 },
            { A: "340", I: 227 },
            ]
        };

        function $UC$Phone$getImageIndex() {
            if (_p.length != 0)
            {
            var io = _imageoverride["C" + _c];
            if (!io) return _images["C" + _c] || 78;

            for (var i = 0; i < io.length; i++)
            {
                if (io[i].A.indexOf(_a) >= 0)
                return io[i].I;
            }
            return _images["C" + _c] || 78
            }
            else if (_d.length != 0)
            return 256;
            else if (_e.length != 0)
            return 256;
            else
            return 255;
        }

        function $UC$Phone$toString(x) {
            var r = "";
            if (!x)
            r = _r.getString("PHONE_TYPE_DIALNUM");
            else
            r = x;
            if (_p.length != 0)
            {
            r += "+";
            r += _c;
            r += " ";
            if (_a.length != 0)
                r += "(" + _a + ")";
            r += _p;
            }
            else if (_e.length != 0)
            {
            r += _r.getString("PHONE_TYPE_DIALEXT");
            r += _e;
            }
            else if (_d.length != 0)
            {
            r += _r.getString("PHONE_TYPE_DIALASIS");
            r += _d;
            }
            else
            {
            r += "";
            }

            return r;
        }

        function $UC$Phone$toDBString() {
            var r = "";
            if (_p.length != 0)
            {
            r += _c;
            r += "(";
            r += _a;
            r += ")";
            r += _p;
            }
            else if (_e.length != 0)
            {
            r = _e;
            }
            else if (_d.length != 0)
            {
            r = "#";
            r += _d;
            }
            else
            {
            r += "";
            }

            return r;
        }

        function $UC$Phone$isExtension() { 
            return ((_e.length != 0) && (_p.length == 0)); 
        }

        this.isExtension = $UC$Phone$isExtension;
        this.toString = $UC$Phone$toString;
        this.toDBString = $UC$Phone$toDBString;
        this.getImageIndex = $UC$Phone$getImageIndex;
    }

    $UC.PhoneParse = new function $UC$PhoneParse() {
    var _rules = { R:[
            { I: "807df1b8-a268-4478-9e2a-7cf32597324b", C: "32", A: null, G: { C: -1, A: 3, P: 6, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0(?: *(?:\)|\.|_) *)?))((?:[2349]))((?:(?: *(?:\)|\.|_) *)?))((?:[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9])|(?:[1-9][0-9][0-9][\.\- ]?[0-9][0-9][0-9][0-9])|(?:[1-9][0-9][0-9][\.\- ]?[0-9][0-9][\.\- ]?[0-9][0-9]))$/ },
            { I: "f732f4d4-2a42-4b1e-a076-9f0ead8d0411", C: "32", A: null, G: { C: -1, A: 3, P: 6, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0(?: *(?:\)|\.|_) *)?))((?:1[01234569])|(?:4[0-9][0-9])|(?:5[0-9])|(?:6[01345789])|(?:7[01])|(?:8[012345679])|(?:800)|(?:90[0-9]))((?:(?: *(?:\)|\.|_) *)?))((?:[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9])|(?:[1-9][0-9][0-9][\.\- ]?[0-9][0-9][0-9])|(?:[1-9][0-9][\.\- ]?[0-9][0-9][\.\- ]?[0-9][0-9]))$/ },
            { I: "b8a310d4-8d10-44de-b97d-7c04d4f5e52c", C: null, A: null, G: { C: 2, A: 5, P: 8, E: -1, D: -1 }, R: /^((?:\+?))((?:32))((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:[2349]))((?:(?: *(?:\)|\.|_) *)?))((?:[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9])|(?:[1-9][0-9][0-9][\.\- ]?[0-9][0-9][0-9][0-9])|(?:[1-9][0-9][0-9][\.\- ]?[0-9][0-9][\.\- ]?[0-9][0-9]))$/ },
            { I: "b22dc2d2-aca7-4e24-baaf-e17d61424753", C: null, A: null, G: { C: 2, A: 5, P: 8, E: -1, D: -1 }, R: /^((?:\+?))((?:32))((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:1[01234569])|(?:4[0-9][0-9])|(?:5[0-9])|(?:6[01345789])|(?:7[01])|(?:8[012345679])|(?:800)|(?:90[0-9]))((?:(?: *(?:\)|\.|_) *)?))((?:[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9])|(?:[1-9][0-9][0-9][\.\- ]?[0-9][0-9][0-9])|(?:[1-9][0-9][\.\- ]?[0-9][0-9][\.\- ]?[0-9][0-9]))$/ },
            { I: "dbb46c91-b818-488a-aea2-ef70b56f9929", C: "86", A: null, G: { C: -1, A: 3, P: 5, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0(?: *(?:\)|\.|_) *)?))((?:1[3458][0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "7d7218f3-1b01-468d-95b0-0f31e8f8277e", C: "86", A: null, G: { C: -1, A: 3, P: 5, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0(?: *(?:\)|\.|_) *)?))((?:10)|(?:2[0-9])|(?:[3456789][0-9][0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]?))$/ },
            { I: "72d9321c-60cd-45a8-8979-ed917ec05d9c", C: null, A: null, G: { C: 2, A: 4, P: 6, E: -1, D: -1 }, R: /^((?:\+?))((?:86))((?:(?: *(?:\(|\.|_) *)?))((?:1[3458][0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "a65be6e1-4fb3-46ca-bd61-54a55beebe3f", C: null, A: null, G: { C: 2, A: 5, P: 7, E: -1, D: -1 }, R: /^((?:\+?))((?:86))((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:10)|(?:2[0-9])|(?:[3456789][0-9][0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]?))$/ },
            { I: "03b7b017-6ccb-43b0-8b35-76ac2797b52d", C: "57", A: null, G: { C: -1, A: 3, P: 5, E: -1, D: -1 }, R: /^((?:01))((?:[\.\- ]?))((?:800)|(?:900)|(?:901)|(?:947)|(?:948))((?:[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9])|(?:[1-9][0-9][0-9][\.\- ]?[0-9][0-9][0-9][0-9])|(?:[1-9][0-9][0-9][\.\- ]?[0-9][0-9][\.\- ]?[0-9][0-9]))$/ },
            { I: "ebe8292e-4b3c-4d19-9129-a9ed6e0ef5ea", C: "57", A: null, G: { C: -1, A: 2, P: 4, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:[1245678]))((?:(?: *(?:\)|\.|_) *)?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9])|(?:[1-9][0-9][0-9][\.\- ]?[0-9][0-9][0-9][0-9])|(?:[1-9][0-9][0-9][\.\- ]?[0-9][0-9][\.\- ]?[0-9][0-9]))$/ },
            { I: "9d25e6e2-54a3-49b9-95cf-f37a280cea3e", C: "57", A: null, G: { C: -1, A: 2, P: 4, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:3[0-9][0-9]))((?:(?: *(?:\)|\.|_) *)?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9])|(?:[1-9][0-9][0-9][\.\- ]?[0-9][0-9][0-9][0-9])|(?:[1-9][0-9][0-9][\.\- ]?[0-9][0-9][\.\- ]?[0-9][0-9]))$/ },
            { I: "648edac4-2144-4bc7-87b8-3a8c5a34e43e", C: null, A: null, G: { C: 2, A: 4, P: 6, E: -1, D: -1 }, R: /^((?:\+?))((?:57))((?:(?: *(?:\(|\.|_) *)?))((?:[1245678]))((?:(?: *(?:\)|\.|_) *)?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9])|(?:[1-9][0-9][0-9][\.\- ]?[0-9][0-9][0-9][0-9])|(?:[1-9][0-9][0-9][\.\- ]?[0-9][0-9][\.\- ]?[0-9][0-9]))$/ },
            { I: "af0dfc2b-7781-492b-ab2c-b3fd2e7117d8", C: null, A: null, G: { C: 2, A: 4, P: 6, E: -1, D: -1 }, R: /^((?:\+?))((?:57))((?:(?: *(?:\(|\.|_) *)?))((?:3[0-9][0-9]))((?:(?: *(?:\)|\.|_) *)?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9])|(?:[1-9][0-9][0-9][\.\- ]?[0-9][0-9][0-9][0-9])|(?:[1-9][0-9][0-9][\.\- ]?[0-9][0-9][\.\- ]?[0-9][0-9]))$/ },
            { I: "917e6fe7-bc14-4a8f-9b9d-0925b45c43fc", C: "33", A: null, G: { C: -1, A: 3, P: 5, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0(?: *(?:\)|\.|_) *)?))((?:[1-9]))((?:(?: *(?:\)|\.|_) *)?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9])|(?:[1-9][0-9][0-9][0-9][\.\- ]?[0-9][0-9][0-9][0-9])|(?:[1-9][0-9][\.\- ]?[0-9][0-9][\.\- ]?[0-9][0-9][\.\- ]?[0-9][0-9]))$/ },
            { I: "c7c8a376-dc30-4159-b6db-7581416376f0", C: null, A: null, G: { C: 2, A: 5, P: 7, E: -1, D: -1 }, R: /^((?:\+?))((?:33))((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:[1-9]))((?:(?: *(?:\)|\.|_) *)?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9])|(?:[1-9][0-9][0-9][0-9][\.\- ]?[0-9][0-9][0-9][0-9])|(?:[1-9][0-9][\.\- ]?[0-9][0-9][\.\- ]?[0-9][0-9][\.\- ]?[0-9][0-9]))$/ },
            { I: "480bad5c-61f7-45b7-8e79-f54e5616a761", C: "49", A: null, G: { C: -1, A: 3, P: 5, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:800))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "642893a3-480e-43dc-9b57-bc2cb5832a43", C: "49", A: null, G: { C: -1, A: 3, P: 5, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:1[567][0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]?))$/ },
            { I: "1e33bbad-3758-46f4-85ed-e6c571182bb2", C: "49", A: null, G: { C: -1, A: 3, P: 5, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:3[0-9][0-9][0-9][0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "277b6c6d-4c77-40ac-a116-5a3194bf2986", C: "49", A: null, G: { C: -1, A: 3, P: -1, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0(?: *(?:\)|\.|_) *)??))((?:[1-9][0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9]?[0-9]?[0-9]?))$/ },
            { I: "9f5c170a-77cb-4f2c-b21a-6dcd089d761d", C: "49", A: null, G: { C: -1, A: 3, P: 5, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:[1-9][0-9][0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9]?[0-9]?[0-9]?[0-9]?))$/ },
            { I: "e63ea98b-2cbc-4536-b6d8-65e95570a48e", C: "49", A: null, G: { C: -1, A: 3, P: 5, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:[1-9][0-9][0-9][0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9]?[0-9]?[0-9]?[0-9]?))$/ },
            { I: "9688eb91-f66f-4436-bd39-d7c0738f050a", C: null, A: null, G: { C: 2, A: 5, P: 7, E: -1, D: -1 }, R: /^((?:\+?))((?:49))((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0(?: *(?:\)|\.|_) *)??))((?:1[567][0-9]))((?:(?: *(?:\)|\.|_) *)?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]?))$/ },
            { I: "b5f385b7-784d-496e-b519-12b4884e1078", C: null, A: null, G: { C: 2, A: 5, P: 7, E: -1, D: -1 }, R: /^((?:\+?))((?:49))((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:3[0-9][0-9][0-9][0-9]))((?:(?: *(?:\)|\.|_) *)?))((?:[1-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "144e0087-b873-41da-99be-453f8d2e5073", C: null, A: null, G: { C: 2, A: 5, P: 7, E: -1, D: -1 }, R: /^((?:\+?))((?:49))((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:[1-9][0-9]))((?:(?: *(?:\)|\.|_) *)?))((?:[1-9][0-9][0-9][0-9][0-9][0-9]?[0-9]?[0-9]?))$/ },
            { I: "79a2ea2a-79c7-44f4-aafd-0423d09b3720", C: null, A: null, G: { C: 2, A: 5, P: 7, E: -1, D: -1 }, R: /^((?:\+?))((?:49))((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:[1-9][0-9][0-9]))((?:(?: *(?:\)|\.|_) *)?))((?:[1-9][0-9][0-9][0-9][0-9]?[0-9]?[0-9]?[0-9]?))$/ },
            { I: "efd78736-5fa1-4ac9-8386-dbfe380bb276", C: null, A: null, G: { C: 2, A: 5, P: 7, E: -1, D: -1 }, R: /^((?:\+?))((?:49))((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:[1-9][0-9][0-9][0-9]))((?:(?: *(?:\)|\.|_) *)?))((?:[1-9][0-9][0-9][0-9]?[0-9]?[0-9]?[0-9]?))$/ },
            { I: "d246b205-4038-4c55-8282-90887d197216", C: "36", A: null, G: { C: -1, A: 3, P: 5, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0(?: *(?:\)|\.|_) *)?))((?:1)|(?:[237]0))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "83723b29-2b2b-43ad-bb69-52231571da69", C: null, A: null, G: { C: 2, A: 5, P: 7, E: -1, D: -1 }, R: /^((?:\+?))((?:36))((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:1)|(?:[237]0))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "f87b6a1f-27d6-4e64-951b-b0acd5482d9a", C: null, A: null, G: { C: 2, A: 5, P: 7, E: -1, D: -1 }, R: /^((?:\+?))((?:36))((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:[23456789][0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "e8e6e67d-9b07-4624-9a0f-94a4ef91f825", C: "36", A: null, G: { C: -1, A: 3, P: 5, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0(?: *(?:\)|\.|_) *)?))((?:[23456789][0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "a2f7bb85-de18-48f5-a9ec-42f947110a44", C: "41", A: null, G: { C: -1, A: 3, P: 5, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:2[12467])|(?:3[1234])|(?:4[134])|(?:5[12568])|(?:6[12])|(?:7[146789])|(?:81)|(?:800)|(?:84[0248])|(?:86[089])|(?:90[016])|(?:9[189]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]?[0-9]?[0-9]?)|(?:[1-9][0-9][0-9][\.\- ]?[0-9][0-9][0-9][0-9])|(?:[1-9][0-9][0-9][\.\- ]?[0-9][0-9][\.\- ]?[0-9][0-9]))$/ },
            { I: "0208e8bc-beb0-41e8-8b73-b972dddaccb5", C: null, A: null, G: { C: 2, A: 5, P: 7, E: -1, D: -1 }, R: /^((?:\+?))((?:41))((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:2[12467])|(?:3[1234])|(?:4[134])|(?:5[12568])|(?:6[12])|(?:7[146789])|(?:81)|(?:800)|(?:84[0248])|(?:86[089])|(?:90[016])|(?:9[189]))((?:(?: *(?:\)|\.|_) *)?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]?[0-9]?[0-9]?)|(?:[1-9][0-9][0-9][\.\- ]?[0-9][0-9][0-9][0-9])|(?:[1-9][0-9][0-9][\.\- ]?[0-9][0-9][\.\- ]?[0-9][0-9]))$/ },
            { I: "b5356329-40d2-44ab-88f7-67c92eb81a57", C: "39", A: null, G: { C: -1, A: 2, P: 4, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:3[0-9][0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "5d475e79-d28c-44b6-b63c-c861a7357a30", C: "39", A: null, G: { C: -1, A: 3, P: 5, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:80[0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "a0634152-067e-4c84-8cec-0323aaaa7614", C: "39", A: null, G: { C: -1, A: 3, P: 5, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:[26]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]?[0-9]?))$/ },
            { I: "a858d0c7-2d3a-4353-b14f-93b60428fd07", C: "39", A: null, G: { C: -1, A: 3, P: 5, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:[1345789][0159]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]?[0-9]?))$/ },
            { I: "923df194-91c7-4b0c-b57b-a58e139ec89e", C: "39", A: null, G: { C: -1, A: 3, P: 5, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:[1345789][234678][1-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9]?[0-9]?))$/ },
            { I: "d2a8e438-bdf5-4646-bb94-87a202ee2a22", C: null, A: null, G: { C: 2, A: 4, P: 6, E: -1, D: -1 }, R: /^((?:\+?))((?:39))((?:(?: *(?:\(|\.|_) *)?))((?:3[0-9][0-9]))((?:(?: *(?:\)|\.|_) *)?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "c7abb3c5-370b-4092-8f10-77161176c53f", C: null, A: null, G: { C: 2, A: 5, P: 7, E: -1, D: -1 }, R: /^((?:\+?))((?:39))((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:[26]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]?[0-9]?))$/ },
            { I: "4064d863-6514-400f-b4d2-955698fc8cfe", C: null, A: null, G: { C: 2, A: 5, P: 7, E: -1, D: -1 }, R: /^((?:\+?))((?:39))((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:[1345789][0159]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]?[0-9]?))$/ },
            { I: "73b0f361-0f42-4a6d-8c00-288b46fcfd86", C: null, A: null, G: { C: 2, A: 5, P: 7, E: -1, D: -1 }, R: /^((?:\+?))((?:39))((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:[1345789][234678][1-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9]?[0-9]?))$/ },
            { I: "aae216c6-8435-4e9d-adfc-99fdc936f9a2", C: "972", A: null, G: { C: -1, A: 3, P: 5, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0(?: *(?:\)|\.|_) *)?))((?:[23489])|(?:[57][1-9])|(?:[789][0-9][0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "8c3c4633-1e6c-403c-b8b1-7368482aec1f", C: null, A: null, G: { C: 2, A: 5, P: 7, E: -1, D: -1 }, R: /^((?:\+?))((?:972))((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:[23489])|(?:[57][1-9])|(?:[789][0-9][0-9]))((?:(?: *(?:\)|\.|_) *)?[0-9]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "649c31fd-be99-4dfb-988e-ecdec9e0ca70", C: "52", A: null, G: { C: -1, A: 2, P: 4, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:33)|(?:55)|(?:81))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "43b2947e-e080-490b-91f5-bf4680d3e6f0", C: "52", A: null, G: { C: -1, A: 2, P: 4, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:[1234567][0-9][0-9])|(?:[89][1-9][0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "98f2cd1f-66ec-4a53-97eb-b7c878e3d54c", C: null, A: null, G: { C: 2, A: 4, P: 6, E: -1, D: -1 }, R: /^((?:\+?))((?:52))((?:(?: *(?:\(|\.|_) *)?))((?:33)|(?:55)|(?:81))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "4e3625b1-a137-4bf6-9ee3-f59af5e0b1fe", C: null, A: null, G: { C: 2, A: 4, P: 6, E: -1, D: -1 }, R: /^((?:\+?))((?:52))((?:(?: *(?:\(|\.|_) *)?))((?:[1234567][0-9][0-9])|(?:[89][1-9][0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "9a4b7d66-af4b-4ed8-8a6b-e8042269e278", C: "31", A: null, G: { C: -1, A: 3, P: 5, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:6))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "215bf9cb-12fa-4664-9204-f88bf175572e", C: "31", A: null, G: { C: -1, A: 3, P: 5, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0(?: *(?:\)|\.|_) *)?))((?:800))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9]?))$/ },
            { I: "3f7e8b9a-cccc-46ac-ac95-10db99a4511a", C: "31", A: null, G: { C: -1, A: 3, P: 5, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0(?: *(?:\)|\.|_) *)?))((?:1[035])|(?:2[0346])|(?:3[03568])|(?:4[0356])|(?:5[0358])|(?:7[1-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "56bbf6a9-4766-4e8a-8641-bc3223082f70", C: "31", A: null, G: { C: -1, A: 3, P: 5, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0(?: *(?:\)|\.|_) *)?))((?:1[1678][0-9])|(?:2[259][0-9])|(?:3[124][0-9])|(?:4[1789][0-9])|(?:5[124679][0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "bfca48c6-cba7-4bb8-b0e8-d16642dba0bf", C: null, A: null, G: { C: 2, A: 5, P: 7, E: -1, D: -1 }, R: /^((?:\+?))((?:31))((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:6))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "f47496e9-954b-47ff-a22e-28507f7b3ae7", C: null, A: null, G: { C: 2, A: 5, P: 7, E: -1, D: -1 }, R: /^((?:\+?))((?:31))((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:1[035])|(?:2[0346])|(?:3[03568])|(?:4[0356])|(?:5[0358])|(?:7[1-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "49a4e3e1-290d-4217-97b1-a4672bd8a70b", C: null, A: null, G: { C: 2, A: 5, P: 7, E: -1, D: -1 }, R: /^((?:\+?))((?:31))((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:1[1678][0-9])|(?:2[259][0-9])|(?:3[124][0-9])|(?:4[1789][0-9])|(?:5[124679][0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "9ded538b-1a7d-4bf7-8d4e-c27ca73d702d", C: "1", A: null, G: { C: -1, A: 2, P: 4, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:800)|(?:822)|(?:833)|(?:844)|(?:855)|(?:866)|(?:877)|(?:880)|(?:881)|(?:882)|(?:888))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[A-Z0-9][\.\- ]?[A-Z0-9][\.\- ]?[A-Z0-9][\.\- ]?[A-Z0-9][\.\- ]?[A-Z0-9][\.\- ]?[A-Z0-9][\.\- ]?[A-Z0-9][\.\- ]?[A-Z0-9]?[\.\- ]?[A-Z0-9]?[\.\- ]?[A-Z0-9]?[\.\- ]?[A-Z0-9]?))$/ },
            { I: "702658b1-9f4d-4830-9664-95107b98c430", C: "1", A: null, G: { C: -1, A: 2, P: 4, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:[2-9][0-9][0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[2-9][0-9][0-9][0-9][0-9][0-9][0-9])|(?:[2-9][0-9][0-9][\.\- ]?[0-9][0-9][0-9][0-9])|(?:[2-9][0-9][0-9][\.\- ]?[0-9][0-9][\.\- ]?[0-9][0-9]))$/ },
            {"I":"702658b1-9f4d-4830-9664-95107b98c430", C: "1", A: "*", G:{C:-1, A:-1, P:4, E:-1, D:-1 }, R: /^((?:(?: *(?:\(|\.|_|-| ) *)?))()()((?:[2-9][0-9][0-9][0-9][0-9][0-9][0-9])|(?:[2-9][0-9][0-9][\.\- ]?[0-9][0-9][0-9][0-9])|(?:[2-9][0-9][0-9][\.\- ]?[0-9][0-9][\.\- ]?[0-9][0-9]))$/ },
            { I: "edfedf1a-1f83-4289-8fd9-c5b08212a615", C: null, A: null, G: { C: 2, A: 4, P: 6, E: -1, D: -1 }, R: /^((?:\+?))((?:1))((?:(?: *(?:\(|\.|_) *)?))((?:800)|(?:822)|(?:833)|(?:844)|(?:855)|(?:866)|(?:877)|(?:880)|(?:881)|(?:882)|(?:888))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[A-Z0-9][\.\- ]?[A-Z0-9][\.\- ]?[A-Z0-9][\.\- ]?[A-Z0-9][\.\- ]?[A-Z0-9][\.\- ]?[A-Z0-9][\.\- ]?[A-Z0-9][\.\- ]?[A-Z0-9]?[\.\- ]?[A-Z0-9]?[\.\- ]?[A-Z0-9]?[\.\- ]?[A-Z0-9]?))$/ },
            { I: "69315d0a-91d8-4209-937a-dc6adbce88e2", C: null, A: null, G: { C: 2, A: 4, P: 6, E: -1, D: -1 }, R: /^((?:\+?))((?:1))((?:(?: *(?:\(|\.|_) *)?))((?:[2-9][0-9][0-9]))((?:(?: *(?:\)|\.|_) *)?))((?:[2-9][0-9][0-9][0-9][0-9][0-9][0-9])|(?:[2-9][0-9][0-9][\.\- ]?[0-9][0-9][0-9][0-9])|(?:[2-9][0-9][0-9][\.\- ]?[0-9][0-9][\.\- ]?[0-9][0-9]))$/ },
            { I: "453be339-0d14-4f87-a508-b30c99d87d0b", C: "351", A: null, G: { C: -1, A: 2, P: 4, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:9[0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "d3fe1971-8c5d-4bf9-98ea-e4edbd1e6453", C: "351", A: null, G: { C: -1, A: 2, P: 4, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:800))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "03621802-8efc-452b-ab06-23852627b892", C: "351", A: null, G: { C: -1, A: 2, P: 4, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:2[12]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "c1b595ad-9c1e-404e-bdbc-ff20d34b212d", C: "351", A: null, G: { C: -1, A: 2, P: 4, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:2[3456789][0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "637f0876-1a2d-4a26-b274-d5765edd74e5", C: null, A: null, G: { C: 2, A: 4, P: 6, E: -1, D: -1 }, R: /^((?:\+?))((?:351))((?:(?: *(?:\(|\.|_) *)?))((?:9[0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "68092710-0d16-4bbe-b47a-6cbe57e692e8", C: null, A: null, G: { C: 2, A: 4, P: 6, E: -1, D: -1 }, R: /^((?:\+?))((?:351))((?:(?: *(?:\(|\.|_) *)?))((?:2[12]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "e6f4d90c-1fd5-4f1f-abe6-dd6d43596500", C: null, A: null, G: { C: 2, A: 4, P: 6, E: -1, D: -1 }, R: /^((?:\+?))((?:351))((?:(?: *(?:\(|\.|_) *)?))((?:2[3456789][0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "a9b6a925-63a2-4103-bfc8-b9ae2fa68248", C: "7", A: null, G: { C: -1, A: 2, P: 4, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:[1-9][0-9][0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9])|(?:[1-9][0-9][0-9][\.\- ]?[0-9][0-9][0-9][0-9])|(?:[1-9][0-9][0-9][\.\- ]?[0-9][0-9][\.\- ]?[0-9][0-9]))$/ },
            { I: "e0ffb55f-42dc-4b82-b109-a29a77c98030", C: "7", A: null, G: { C: -1, A: 2, P: 4, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:[1-9][0-9][0-9][0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9])|(?:[1-9][0-9][0-9][\.\- ]?[0-9][0-9][0-9])|(?:[1-9][0-9][\.\- ]?[0-9][0-9][\.\- ]?[0-9][0-9]))$/ },
            { I: "8e1d71b5-783f-4474-92a1-b6c38d03169a", C: "7", A: null, G: { C: -1, A: 2, P: 4, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:[1-9][0-9][0-9][0-9][0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9])|(?:[1-9][0-9][\.\- ]?[0-9][0-9][0-9])|(?:[1-9][\.\- ]?[0-9][0-9][\.\- ]?[0-9][0-9]))$/ },
            { I: "d79751fe-ddd9-4c99-93ce-2b84b50c843d", C: null, A: null, G: { C: 2, A: 4, P: 6, E: -1, D: -1 }, R: /^((?:\+?))((?:7))((?:(?: *(?:\(|\.|_) *)?))((?:[1-9][0-9][0-9]))((?:(?: *(?:\)|\.|_) *)?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9])|(?:[1-9][0-9][0-9][\.\- ]?[0-9][0-9][0-9][0-9])|(?:[1-9][0-9][0-9][\.\- ]?[0-9][0-9][\.\- ]?[0-9][0-9]))$/ },
            { I: "a00c55ab-97e4-4ed8-9b77-a58f35a1ecff", C: null, A: null, G: { C: 2, A: 4, P: 6, E: -1, D: -1 }, R: /^((?:\+?))((?:7))((?:(?: *(?:\(|\.|_) *)?))((?:[1-9][0-9][0-9][0-9]))((?:(?: *(?:\)|\.|_) *)?))((?:[1-9][0-9][0-9][0-9][0-9][0-9])|(?:[1-9][0-9][0-9][\.\- ]?[0-9][0-9][0-9])|(?:[1-9][0-9][\.\- ]?[0-9][0-9][\.\- ]?[0-9][0-9]))$/ },
            { I: "d413f59b-acf8-428c-b9cd-79788660d3f6", C: null, A: null, G: { C: 2, A: 4, P: 6, E: -1, D: -1 }, R: /^((?:\+?))((?:7))((?:(?: *(?:\(|\.|_) *)?))((?:[1-9][0-9][0-9][0-9][0-9]))((?:(?: *(?:\)|\.|_) *)?))((?:[1-9][0-9][0-9][0-9][0-9])|(?:[1-9][0-9][\.\- ]?[0-9][0-9][0-9])|(?:[1-9][\.\- ]?[0-9][0-9][\.\- ]?[0-9][0-9]))$/ },
            { I: "4c2e9f67-204a-47eb-95c2-36256c512f76", C: "966", A: null, G: { C: -1, A: 3, P: 5, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0(?: *(?:\)|\.|_) *)?))((?:[1234678])|(?:5[0345689]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]?))$/ },
            { I: "e0fae84e-fe77-4528-be37-7e581acfe2b8", C: null, A: null, G: { C: 2, A: 5, P: 7, E: -1, D: -1 }, R: /^((?:\+?))((?:966))((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:[1234678])|(?:5[0345689]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]?))$/ },
            { I: "b995edce-b91b-494d-a7c4-668df22ab38b", C: "34", A: null, G: { C: -1, A: 2, P: 4, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:[67][0-9][0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "56d348d4-d614-44c0-a785-f753257df355", C: "34", A: null, G: { C: -1, A: 2, P: 4, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:800))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "a3aab9f3-136c-482e-97b0-83376f09be00", C: "34", A: null, G: { C: -1, A: 2, P: 4, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:8[245678][0-9])|(?:9[12345678][0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "3ef9b706-c157-499e-b0b3-2cbe2f39f149", C: null, A: null, G: { C: 2, A: 4, P: 5, E: -1, D: -1 }, R: /^((?:\+?))((?:34))((?:(?: *(?:\(|\.|_) *)?))((?:[67][0-9][0-9]))((?:[1-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "5b8ab85c-3de6-434a-bfc9-14123464b1af", C: null, A: null, G: { C: 2, A: 4, P: 6, E: -1, D: -1 }, R: /^((?:\+?))((?:34))((?:(?: *(?:\(|\.|_) *)?))((?:8[245678][0-9])|(?:9[12345678][0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "9715f194-058d-4fd8-b845-7e95331d0b90", C: "46", A: null, G: { C: -1, A: 3, P: 5, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0(?: *(?:\)|\.|_) *)?))((?:1[013689])|(?:2[0136])|(?:3[1356])|(?:4[0246])|(?:5[4])|(?:6[03])|(?:7[01236])|(?:8)|(?:90))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9]?[0-9]?))$/ },
            { I: "8a069872-de1a-477e-addf-f42ff9ceacd5", C: "46", A: null, G: { C: -1, A: 3, P: 5, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0(?: *(?:\)|\.|_) *)?))((?:[1-9][0-9][0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9]?[0-9]?))$/ },
            { I: "2352a73c-29d7-42fe-9a54-14fe9425b9ec", C: null, A: null, G: { C: 2, A: 5, P: 7, E: -1, D: -1 }, R: /^((?:\+?))((?:46))((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:1[013689])|(?:2[0136])|(?:3[1356])|(?:4[0246])|(?:5[4])|(?:6[03])|(?:7[01236])|(?:8)|(?:90))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9]?[0-9]?))$/ },
            { I: "68b0a15f-211f-499f-827a-f8adeab44aae", C: null, A: null, G: { C: 2, A: 5, P: 7, E: -1, D: -1 }, R: /^((?:\+?))((?:46))((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:[1-9][0-9][0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9]?[0-9]?))$/ },
            { I: "63ad3f67-e6cd-49a5-92dd-6f19324b8524", C: "44", A: null, G: { C: -1, A: 3, P: 5, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0(?: *(?:\)|\.|_) *)?))((?:11[0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[0-9][0-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "61a9e982-333d-4937-94e1-28f5de30d956", C: "44", A: null, G: { C: -1, A: 3, P: 5, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0(?: *(?:\)|\.|_) *)?))((?:1[0-9]1))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[0-9][0-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "86b82eef-3e2e-49f3-ab99-6b1363f1ae80", C: "44", A: null, G: { C: -1, A: 3, P: 5, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0(?: *(?:\)|\.|_) *)?))((?:1[0-9][0-9][0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[0-9][0-9][0-9][0-9][0-9][0-9][0-9]?))$/ },
            { I: "cd781fff-8d32-4172-9d79-8f489e8c0fc2", C: "44", A: null, G: { C: -1, A: 3, P: 5, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0(?: *(?:\)|\.|_) *)?))((?:[2357][0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]?))$/ },
            { I: "f5cb8e58-6505-436f-b374-74d73a262c04", C: "44", A: null, G: { C: -1, A: 3, P: 5, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0(?: *(?:\)|\.|_) *)?))((?:[89][0-9][0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[0-9][0-9][0-9][0-9][0-9][0-9][0-9]?))$/ },
            { I: "d461c7ba-4358-43c5-a348-1c08b896cebf", C: null, A: null, G: { C: 2, A: 5, P: 7, E: -1, D: -1 }, R: /^((?:\+?))((?:44))((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:11[0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "b855f67c-d721-4883-9680-026b59818ecc", C: null, A: null, G: { C: 2, A: 5, P: 7, E: -1, D: -1 }, R: /^((?:\+?))((?:44))((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:1[0-9]1))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "0f01eeae-a98b-4f62-b714-3c091f43331d", C: null, A: null, G: { C: 2, A: 5, P: 7, E: -1, D: -1 }, R: /^((?:\+?))((?:44))((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:1[0-9][0-9][0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[0-9][0-9][0-9][0-9][0-9][0-9][0-9]?))$/ },
            { I: "dde2b7bc-3f9f-4eab-9e3f-ccb35cd603f2", C: null, A: null, G: { C: 2, A: 5, P: 7, E: -1, D: -1 }, R: /^((?:\+?))((?:44))((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:[2357][0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]?))$/ },
            { I: "858be6a8-466e-4b8b-81bb-27ca5ea8a1b5", C: null, A: null, G: { C: 2, A: 5, P: 7, E: -1, D: -1 }, R: /^((?:\+?))((?:44))((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:[89][0-9][0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9]?))$/ },
            { I: "ca2e9595-d536-43f6-9b25-996dcfe4e378", C: "971", A: null, G: { C: -1, A: 3, P: 5, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0(?: *(?:\)|\.|_) *)?))((?:[234679]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9]?))$/ },
            { I: "1cefb914-a9be-4386-baa6-1ae4cce4cb58", C: "971", A: null, G: { C: -1, A: 3, P: 5, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0(?: *(?:\)|\.|_) *)?))((?:5[0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9]?))$/ },
            { I: "0803c160-b4e2-44d2-8435-767a8c72d86e", C: "971", A: null, G: { C: -1, A: 2, P: 4, E: -1, D: -1 }, R: /^((?:(?: *(?:\(|\.|_) *)?))((?:[23456789]00))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[0-9][0-9][0-9][0-9]))$/ },
            { I: "87591719-a6b6-4a56-8435-f15affbffa5b", C: null, A: null, G: { C: 2, A: 5, P: 7, E: -1, D: -1 }, R: /^((?:\+?))((?:971))((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:[234679]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9]))$/ },
            { I: "7eca0ae5-2038-4f92-a3ce-c0aac6525d30", C: null, A: null, G: { C: 2, A: 5, P: 7, E: -1, D: -1 }, R: /^((?:\+?))((?:971))((?:(?: *(?:\(|\.|_) *)?))((?:(?: *(?:\(|\.|_) *)?0?(?: *(?:\)|\.|_) *)?))((?:5[0-9]))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9]?))$/ },
            { I: "13a477a6-a84f-481d-ab9b-5440c27596bb", C: null, A: null, G: { C: -1, A: -1, P: -1, E: -1, D: 2 }, R: /^((?:\#))((?:[0-9\*\#\,][0-9\*\#\,]?[0-9\*\#\,]?[0-9\*\#\,]?[0-9\*\#\,]?[0-9\*\#\,]?[0-9\*\#\,]?[0-9\*\#\,]?[0-9\*\#\,]?[0-9\*\#\,]?[0-9\*\#\,]?[0-9\*\#\,]?[0-9\*\#\,]?[0-9\*\#\,]?[0-9\*\#\,]?[0-9\*\#\,]?[0-9\*\#\,]?[0-9\*\#\,]?[0-9\*\#\,]?[0-9\*\#\,]?))$/ },
            { I: "4f5c4f61-32fc-412e-aca2-4f5811c71824", C: null, A: null, G: { C: 2, A: 4, P: 6, E: -1, D: -1 }, R: /^((?:\+?))((?:2[07])|(?:2[0-9][0-9])|(?:3[0])|(?:35[023456789])|(?:4[023578])|(?:5[134568])|(?:5[09][0-9])|(?:6[0-6])|(?:6[78][0-9])|(?:69[012])|(?:8[124])|(?:85[02356])|(?:866)|(?:800)|(?:888)|(?:9[0123458])|(?:96[01234578])|(?:97[34567])|(?:99[45]))((?:(?: *(?:\(|\.|_) *)?))((?:[1-9][0-9]?[0-9]?))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[1-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]?[0-9]?))$/ },
            { I: "a673cae4-8a83-4fd3-87ab-a80679beed81", C: null, A: null, G: { C: 2, A: 4, P: 6, E: -1, D: -1 }, R: /^((?:\+?))((?:2[07])|(?:2[0-9][0-9])|(?:3[0])|(?:35[023456789])|(?:4[023578])|(?:5[134568])|(?:5[09][0-9])|(?:6[0-6])|(?:6[78][0-9])|(?:69[012])|(?:8[124])|(?:85[02356])|(?:866)|(?:800)|(?:888)|(?:9[0123458])|(?:96[01234578])|(?:97[34567])|(?:99[45]))((?:(?: *(?:\(|\.|_) *)))((?:[0-9][0-9]?[0-9]?[0-9]?[0-9]?))((?:(?: *(?:\)|\.|_) *)?[\.\- ]?))((?:[0-9][0-9][0-9][0-9][0-9][0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?))$/ },
            { I: "3bb08a51-5a6c-45db-b4b4-70e3061d5191", C: null, A: null, G: { C: -1, A: -1, P: -1, E: 1, D: -1 }, R: /^((?:[0-9][0-9][0-9][0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?))$/ }
        ]
    };

    this.setRules = function $UC$PhoneParse$setRules(r) {
        _rules = r;
        _json = null;
    }

    this.getRules = function $UC$PhoneParse$getRules() {
        return _rules;
    }

    var _json = null;
    this.getRulesJSON = function $UC$PhoneParse$getRulesJSON() {
        if (_json != null)
            return _json;
        var _out = [];
        for (var i = 0; i < _rules.R.length; i++) {
            var r = {
                C: _rules.R[i].C,
                A: _rules.R[i].A,
                G: _rules.R[i].G,
                R: _rules.R[i].R.source
            };
            _out.push(r);
        }
        _json = JSON.stringify({
            R: _out
        });
        return _json;
    }

    this.setRulesJSON = function $UC$PhoneParse$setRulesJSON(json) {
        var _out = JSON.parse(json);
        var _new = [];
        for (var i = 0; i < _out.R.length; i++) {
            var r = {
                C: _out.R[i].C,
                A: _out.R[i].A,
                G: _out.R[i].G,
                R: new RegExp(_out.R[i].R)
            };
            _new.push(r);
        }
        _rules = {
            R: _new
        };
    }

    var _digits = "0123456789";

    function isDigit(c) {
        return (_digits.indexOf(c) >= 0);
    }

    this.cleanPhone = function $UC$PhoneParse$cleanPhone(p) {
        var r = "";
        for (var i = 0; i < p.length; i++) {
            var c = p.substr(i, 1);
            if (c == "#") r += c;
            else if (c == "+") r += c;
            else if (c == ",") r += c;
            else if (c == "p") r += c;
            else if (c == "w") r += c;
            else if (c == "(") r += c;
            else if (c == ")") r += c;
            else if (isDigit(c)) r += c;
        }
        return r;
    }

    function matchRule(dup, t, r, c, a, show) {
        if (!show) {
            if (r.C && c && (c.indexOf(r.C) != 0))
                return null;
            if ((r.C) && ((!c) || (c.indexOf(r.C) != 0)))
                return null;
        }
        if (r.A && !a)
            return null;
        var m = t.match(r.R) || null;
        if (!m) return null;

        var _c = "";
        var _a = "";
        var _p = "";
        var _e = "";
        var _d = "";

        if (r.G.C > 0)
            _c = m[r.G.C];
        if (_c.length == 0)
            _c = r.C || c || "1";
        if (r.G.A > 0)
            _a = m[r.G.A];
        else if (r.A) _a = a;

        if (r.G.P > 0)
            _p = m[r.G.P];
        if (r.G.E > 0)
            _e = m[r.G.E];
        if (r.G.D > 0)
            _d = m[r.G.D];

        if ((_p.length == 0) && (_e.length == 0)) return null;

        var _x = "";
        if (_e.length != 0) _x = _e;
        else if (_d.length != 0) _x = _d;

        var ph = "P_" + _c + "_" + _a + "" + _p + "_" + _x;
        if (dup[ph]) return null;

        dup[ph] = true;
        return new $UC.Phone(_c, _a, _p, _e, _d);
    }

    this.parse = function $UC$PhoneParse$parse(t, c, a, show) {
        var _hres = {};
        var _res = [];

        var t1 = isDigit(t.substr(0, 1)) ? "#" + t : null;
        t = this.cleanPhone(t);
        t1 = t1 ? this.cleanPhone(t1) : null;

        var ph;
        for (var i = 0; i < _rules.R.length; i++) {
            if (ph = matchRule(_hres, t, _rules.R[i], c, a, show)) _res[_res.length] = ph;
        }
        if (!t1) return _res;

        for (var i = 0; i < _rules.R.length; i++) {
            if (ph = matchRule(_hres, t1, _rules.R[i], c, a, show)) _res[_res.length] = ph;
        }

        return _res;
    }
};

$UC.DOMWalk = new function $UC$DOMWalk() {
    var _this = this;
    var _tagsFilter = " STYLE SCRIPT META HEAD LINK INPUT SELECT TEXTAREA NOSCRIPT IFRAME ";
    var _attrFilter = "uc_click_to_dial";
    var _attrEditable = "contenteditable";
    var _attrGoogleDocs = "role";
    var _separator = String.fromCharCode(0xb6);
    var _separatorBlock = String.fromCharCode(0xa7);
    var _spots = [];

    function filterNode(node, tagsToExclude, attrToExclude, attrEditable, attrDocs) {
        // we do not want to walk these tags at all, there is no human readable texts there
        // also we do not want to process tags with certain attribute set
        return (tagsToExclude.indexOf(" " + node.nodeName + " ") >= 0) || (node.getAttribute && (node.getAttribute(attrToExclude) || node.getAttribute(attrEditable) || (node.getAttribute(attrDocs) == "application")));
    }

    function getChildOrSibling(root, current) {
        // if node is filtered then try next sibling
        // if node is not filtered then first try child and if there are none, then next sibling
        var _e = filterNode(current.n, _tagsFilter, _attrFilter, _attrEditable, _attrGoogleDocs) ? current.n.nextSibling : current.n.firstChild || current.n.nextSibling;
        if (_e && (_e == current.n.firstChild)) current.l++;
        // if node found then return
        if (_e) return {
            n: _e,
            l: current.l
        };

        // otherwise step up and find sibling level above
        for (var _p = current.n; root !== _p; _p = _p.parentNode, current.l--) {
            // not sure why but it happens
            if (_p == null) return null;

            if (_e = _p.nextSibling) return {
                n: _e,
                l: current.l
            };
        }
        // if nothing found then we enumerated all nodes
        return null;
    }

    this.hasClass = function hasClass(element, classToCheck) {
        if (!element) return false;
        if (!element.className) return false;
        var classes = element.className.split(' ');

        if ((typeof classToCheck == 'string') && (classToCheck.indexOf(' ') > 0)) // More than one class, transform into array
            classToCheck = classToCheck.split(' ');

        if (typeof classToCheck == 'string') {
            for (var i = 0; i < classes.length; i++)
                if (classes[i] == classToCheck) return true;
            return false;
        }

        if ((typeof classToCheck == 'object') && classToCheck.length) {
            for (var j = 0; j < classToCheck.length; j++) {
                var match = false;
                for (var i = 0;
                    (i < classes.length) && !(match = classes[i] == classToCheck[j]); i++);
                if (!match) return false;
            }
            return true;
        }

        return false;
    }
    this.hasAttribute = function hasAttribute(element, attributeName, optionalAttributeValue) {
        if (!element) return false;
        if (!element.attributes) return false;
        if (!element.attributes[attributeName]) return false;

        if (optionalAttributeValue == undefined) return true;

        var attributeValue = element.attributes[attributeName].value;
        if (attributeValue != optionalAttributeValue) return false;

        return true;
    }
    this.domSelect = function domSelect(element, path, result, currentDepth) {
        if (currentDepth == undefined) {
            currentDepth = 0;
            if (result == undefined) result = [];
        }

        var validator = path[currentDepth++];

        for (var i = 0; i < element.children.length; i++) {
            var item = element.children[i];
            if (item.nodeName == validator.name) {
                if (validator.className.length > 0) {
                    if (!this.hasClass(item, validator.className)) {
                        continue;
                    }
                }

                if (currentDepth >= path.length)
                    result.push(item);
                else
                    this.domSelect(item, path, result, currentDepth);
            }
        }

        return result;
    }

    function isBlockNode(node) {
        var _names = " HR BR H1 H2 H3 H4 H5 H6 H7 IMG DIV TD P ";
        return (_names.indexOf(" " + node.nodeName + " ") >= 0);
    }

    this.walkTree = function walkTree(root) {
        var _text = "";
        var _nodes = [];

        for (var _current = {
                n: root,
                l: 0
            }, _parent = _current.n.parentNode; _current = getChildOrSibling(root, _current); _parent = _current.n.parentNode) {
            var _nt = _current.n.nodeType;

            if (isBlockNode(_current.n)) _text += _separatorBlock;

            // we walk only text nodes
            if (_nt != 3)
                continue;

            // small text cleanup
            var _t = _current.n.nodeValue;
            _t = _t.replace(/\n/g, " ");

            // if node is empty then we do not need it
            if (_t.length == 0)
                continue;

            // put separators to text representation if we DOM level had changed
            if (_parent !== _current.n.parentNode)
                _text += _separator;

            // append non-empty node to collection
            _nodes[_nodes.length] = {
                n: _current.n,
                s: _text.length,
                e: _text.length + _t.length - 1,
                l: _current.l
            };
            // apppend non-empty text to text representation
            _text += _t;
        }

        return {
            text: _text,
            nodes: _nodes
        };

    }

    function findMatches(text, find, fCheck) {
        var re = new RegExp(find, "ig");
        var _entries = [];
        for (var m; m = re.exec(text);) {
            m.lastIndex = m.lastIndex || m.index + m[0].length;
            var pre = " ";
            var pos = " ";
            var sep = false;
            for (var i = m.index - 1; i >= 0; i--) {
                if (!sep && (text.charAt(i) == "¶")) {
                    sep = true;
                    continue;
                }
                if (sep && (text.charAt(i) == "¶")) {
                    pre = " ";
                    break;
                }
                pre = text.charAt(i);
                break;
            }
            sep = false;
            for (var i = m.lastIndex; i < text.length; i++) {
                if (!sep && (text.charAt(i) == "¶")) {
                    sep = true;
                    continue;
                }
                if (sep && (text.charAt(i) == "¶")) {
                    pos = " ";
                    break;
                }
                pos = text.charAt(i);
                break;
            }

            var r;
            if (fCheck && !(r = fCheck(m[0], pre, pos))) continue;

            _entries[_entries.length] = {
                s: m.index + r.skip,
                e: m.lastIndex - 1 - r.skipEnd,
                m: m[0],
                p: r.phone,
                t: r.label
            };
        }
        return _entries;
    }

    function getMatchingNode(nodes, from, pos) {
        for (var i = from; i < nodes.length; i++) {
            var _n = nodes[i];
            if ((pos < _n.s) || (pos > _n.e))
                continue;
            return i;
        }
        return -1;
    }

    function getMatchingNodes(nodes, matches) {
        var _matches = [];
        for (var i = 0, ndx = 0; i < matches.length; i++, ndx = (en >= 0) ? en : ndx) {
            var sn = getMatchingNode(nodes, ndx, matches[i].s);
            if (sn < 0) continue;
            var en = getMatchingNode(nodes, sn, matches[i].e);
            if (en < 0) continue;

            var _nl = [];
            for (var j = sn; j <= en; j++)
                _nl[_nl.length] = nodes[j];

            _matches[_matches.length] = {
                n: _nl,
                s: matches[i].s,
                e: matches[i].e,
                m: matches[i].m,
                p: matches[i].p,
                t: matches[i].t
            };
        }
        return _matches;
    }

    function copyNode(root, target, nodes, index, start, end) {
        // find the node which is child of target future parent
        var n = nodes[index].n;
        if (n == null) alert(1);
        if (root == null) alert(2);
        while (n.parentNode !== root) {
            n = n.parentNode;
            if (n == null) {
                n = nodes[index].n;
                break;
                //alert(3);
            }
        }

        var nn = n.cloneNode(true);
        // somehow we need to cleanup all that goes before or after what we need to wrap
        // lets do it
        // we will find indexes of all text nodes in copied node and find index of original node

        var xn = -1;
        var _nodes = [];
        if (n.nodeType == 1) {
            for (var _current = {
                    n: n,
                    l: 0
                }, _parent = _current.n.parentNode, i = 0; _current = getChildOrSibling(n, _current); _parent = _current.n.parentNode) {
                var _nt = _current.n.nodeType;
                // we walk only text nodes
                if (_nt != 3)
                    continue;

                var _t = _current.n.nodeValue;
                // if node is empty then we do not need it
                if (_t.length == 0)
                    continue;

                if (_current.n === nodes[index].n)
                    xn = i;

                i++;
            }
        }

        target.appendChild(nn);
        if ((index == nodes.length - 1) && (n.nodeType == 3)) {
            var t = nn.nodeValue;
            var s = 0;
            var l = Math.min(end - nodes[index].s, t.length - 1) + 1;
            nn.nodeValue = t.substr(s, l);
        }

        if (xn >= 0) {
            var _nodes = [];
            for (var _current = {
                    n: nn,
                    l: 0
                }, _parent = _current.n.parentNode; _current = getChildOrSibling(nn, _current); _parent = _current.n.parentNode) {
                var _nt = _current.n.nodeType;
                // we walk only text nodes
                if (_nt != 3)
                    continue;

                var _t = _current.n.nodeValue;
                // if node is empty then we do not need it
                if (_t.length == 0)
                    continue;

                // keep list of all text nodes inside of copy
                _nodes[_nodes.length] = _current.n;
            }

            // first remove all nodes from the end
            for (var i = _nodes.length - 1; i >= xn + nodes.length - index; i--)
                _nodes[i].parentNode.removeChild(_nodes[i]);


            if (xn + nodes.length - 1 - index < _nodes.length) {
                var n = _nodes[xn + nodes.length - 1 - index];
                var t = n.nodeValue;

                var s = 0;
                var l = Math.min(end - nodes[index].s, t.length - 1)

                n.nodeValue = t.substr(s, l);
            }

            // and then remove all nodes from beginning
            for (var i = xn - 1; i >= 0; i--)
                _nodes[i].parentNode.removeChild(_nodes[i]);
        }
    }

    function copyNodeToWrapper(root, level, start, end, target, nodes, index, context) {
        var n = nodes[index];
        var t = n.n.nodeValue;

        if (index == 0) {
            // wrappable content prefix
            var s = 0;
            var l = Math.min(start - n.s, t.length - 1);
            var tpre = t.substr(s, l);
            // wrappable content prefix
            s = start - n.s;
            l = Math.min(end - n.s, t.length - 1) - s + 1;
            var tcnt = t.substr(s, l);
            // wrappable content postfix
            s = s + l;
            l = t.length - 1;
            var tpst = t.substr(s, l);

            // update node conent temporarily
            n.n.nodeValue = tcnt;

            // copy node to wrapper
            copyNode(root, target, nodes, index, start, end);

            // if our wrapper was not inserted yet and we are on appropriate level
            if ((target.parentNode != root) && (n.l == level))
                root.insertBefore(target, n.n.nextSibling);

            // return node conent back to prefix
            n.n.nodeValue = tpre;
            n.n.e = Math.min(start - n.s, t.length - 1);

            // if current node both first and last
            if (index == nodes.length - 1) {
                // then prepare postfix node
                var npst = document.createTextNode(tpst);
                n.n.parentNode.insertBefore(npst, target.nextSibling);

                // and update nodes cache
                n.n = npst;
                n.s = n.s + s;
            }
        } else {
            // copy node to wrapper
            if ((n.l == level) || (context.lastLevel == level))
                copyNode(root, target, nodes, index, start, end);

            // if our wrapper was not inserted yet and we are on appropriate level
            if ((target.parentNode != root) && (n.l == level))
                root.insertBefore(target, n.n);

            // cleanup wrapper postfix if it is last node
            if (index == nodes.length - 1) {
                var s = 0;
                var l = Math.min(end - n.s, t.length - 1) + 1;
                n.n.nodeValue = t.substr(l, t.length - 1);
                n.s = n.s + l;
            } else {
                n.n.parentNode.removeChild(n.n);
            }
        }

        context.lastLevel = n.l;
    }

    function getCommonParent(parent, nodes) {
        for (var i = 0; i < nodes.length; i++) {
            var p = nodes[i].n.parentNode;
            while (p !== parent)
                if (!(p = p.parentNode)) return getCommonParent(parent.parentNode, nodes);
        }
        return parent;
    }
    
    function wrapMatch(nodes, s, e, p, t, fClick) {
        var el = document.createElement("span");
        el.className = "ucdpe";
        el.setAttribute(_attrFilter, "1");
        el.setAttribute("id", p);
        // apply class here and set it to active in the onclice
        // bt.style.transform = "scale(0.99)";
        var bt = document.createElement("button");
        bt.style.display = "inline-block";
        bt.style.border = "none";
        bt.style.padding = "1rem 2rem";
        bt.style.margin = "0";
        bt.style.textDecoration = "none";
        bt.style.backgroundColor = "#004de6";
        bt.style.color = "white";
        bt.style.fontSize = "0.1rem";
        bt.style.cursor = "pointer";
        bt.style.textAlign = "center"; 
        bt.style.borderRadius = "2px";
        bt.style.fontSize = "5px";
        bt.style.height = "5px";        
        bt.style.width = "5px";
        bt.setAttribute("value", p);
        bt.setAttribute("title", "Dial "+p+" with Jabber extension");
        // bt.innerHTML = "Jabber Ext";
        bt.addEventListener("click", makeCall, false);
        bt.addEventListener("mousedown", function(e){
            event.stopPropagation(); 
            event.preventDefault();    
        }, false);
        el.appendChild(bt);
        
        // keep button in the list to update tooltip later
        _spots.push(bt);

        // find most common parent for all nodes it will become a parent of wrapper
        var _top = 0;
        for (var i = 1; i < nodes.length; i++)
            if (nodes[i].l < nodes[_top].l) _top = i;
        var _level = nodes[_top].l;
        var _parent = nodes[_top].n.parentNode;
        // _parent = getCommonParent(_parent, nodes);

        // perform actual wrap
        var _context = {};
        for (var i = 0; i < nodes.length; i++)
            copyNodeToWrapper(_parent, _level, s, e, el, nodes, i, _context);
    }

    this.walkAndHighlight = function walkAndHighlight(el, find, fCheck, fClick) {
        return this.highlight(this.walkTree(el), find, fCheck, fClick);
    }

    this.highlight = function highlight(nodes, find, fCheck, fClick) {
        // find all positions of text to find in textual DOM represenation
        var _matches = findMatches(nodes.text, find, fCheck);
        // convert text positions to matching nodes
        _matches = getMatchingNodes(nodes.nodes, _matches);


        var _res = false;
        // wrap nodes content
        for (var i = 0; i < _matches.length; i++) {
            _res = true;
            wrapMatch(_matches[i].n, _matches[i].s, _matches[i].e, _matches[i].p, _matches[i].t, fClick);
        }

        return _res;
    }

    this.updateTooltips = function updateTooltips(t) {
        for (var i = 0; i < _spots.length; i++)
            _spots[i].setAttribute("title", t);
    }
}

$UC.ClickToDial = new function $UC$ClickToDial() {
    var _this = this;
    var _clicker_id = "UCE526D54F6AB04811B4210ECBF1BF45E7";
    var _clicker;
    var _changing;

    var _dialName = "UC Dial";
    var _dialTooltip = "Dail number with Booking Jabber Extension";
    var _phonesName = "Phones";
    var _dialCountry = "1";
    var _dialArea = "";
    var _dialShowAll = false;

    var _server = "";
    var _updateTimer;
    var _spotsPeople = [];
    var _spotsVCard = [];

    function iframeRef(frameRef) {
        return frameRef.contentWindow ? frameRef.contentWindow.document : frameRef.contentDocument;
    }

    // Called on modification, this function checks if the modified item can help locating necessary elements
    function checkEl(el, expectedClass, path) {
        if (el.nodeName != 'DIV') return;

        if (expectedClass != undefined) {
            if (el.className != expectedClass) return;
        }

        if (path == undefined) path = '';
        path += '[' + el.className + ']';

        if ((el.className == 'St Uw') || (el.className == 'Wt') || (el.className == 'Mt Sw') || (el.className == 'nj Ok')) {
            checkEl(el.parentElement, 'Rt', path);
        } else if (el.className == 'Rt') {
            checkEl(el.parentElement, '', path);
        } else if ((el.className == 'Rt') && (path.indexOf('[Rt]') >= 0)) {
            checkEl(el.parentElement, 'g-al-Xk', path);
        } else if (el.className == 'g-al-Xk') {
            if (el.parentElement.nodeName == 'BODY') {
                console.log('Pre-check path: ' + path);
                if ((el.children.length > 0) && (el = el.children[0]) && (el.nodeName == 'DIV') && (el.className == '')) {
                    if ((el.children.length > 0) && (el = el.children[0]) && (el.nodeName == 'DIV') && (el.className == 'Rt')) {
                        var email;
                        var els = el.getElementsByClassName('nNa')
                        if ((els.length == 1) && (email = els[0].textContent) && (email.indexOf('@') > 0)) {
                            el = el.nextSibling;
                            els = el ? el.getElementsByClassName('Dv Ie') : [];
                            if (els.length == 1) {
                                var affectedItem = els[0];

                                loadObjectWithUri.call(_this, email, null,
                                    function _onLookupVCardV2Completed(result) {
                                        onLookupVCardV2Completed.call(_this, result, affectedItem, email);
                                    });
                            }
                        }
                    }
                }
            }
        }
    }

    function bindNewWay(el, fn) {
        // create an observer instance
        var MutationObserver = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;
        var observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                if (mutation.type == 'childList') {
                    if (mutation.addedNodes) {
                        for (var i = 0; i < mutation.addedNodes.length; i++) {
                            var nd = mutation.addedNodes[i];
                            //yyyLog('+'+nd.nodeName+(nd.id ? ('#'+nd.id):'')+(nd.className ? ('.'+nd.className):''));
                            checkEl(nd);
                            onDOMChangedVCard({
                                srcElement: nd,
                                target: nd,
                                type: 'DOMNodeInserted'
                            })
                            collectCandidateNodes({
                                srcElement: nd,
                                target: nd,
                                type: 'DOMNodeInsertedIntoDocument'
                            });
                        }
                    }
                } else if (mutation.type == 'attributes') {
                    if (mutation.attributeName == 'class') {
                        var nd = mutation.target;
                        //yyyLog('~'+nd.nodeName+(nd.id ? ('#'+nd.id):'')+(nd.className ? ('.'+nd.className):''));
                        checkEl(mutation.target);
                    }
                }
            });
        });

        // configuration of the observer:
        var config = {
            attributes: true,
            childList: true,
            characterData: false,
            subtree: true,
            attributeFilter: ['class']
        };

        // pass in the target node, as well as the observer options
        observer.observe(el, config);

        // later, you can stop observing
        //observer.disconnect();
    }

    function bindDOMEvents(el, f1, f2) {
        bindNewWay(el, f1);
        //el.addEventListener("DOMNodeInsertedIntoDocument", function $UC$ClickToDial$OnNodeInsert() { f1.apply(_this, arguments); }, true);
        el.addEventListener("DOMSubtreeModified", function $UC$ClickToDial$OnTreeChange() {
            f1.apply(_this, arguments);
        }, true);

        //el.addEventListener("DOMNodeInserted", function $UC$ClickToDial$OnNodeInserted() { f2.apply(_this, arguments); }, true);
        el.addEventListener("DOMSubtreeModified", function $UC$ClickToDial$OnTreeChange() {
            f2.apply(_this, arguments);
        }, true);
    }

    function onDOMChanged(ev) {
        collectCandidateNodes(ev);
        findPhones(ev.srcElement);
    }

    function onDOMChangedVCard(ev) {
        if (ev.target.nodeType != 3) return;
        if ((ev.type != "DOMNodeInserted") && (ev.type != "DOMSubtreeModified")) return;

        var affectedItem = ev.target.parentElement;
        if ((affectedItem.className != "tB") || (affectedItem.nodeName != "DIV")) return;

        var div = document.getElementById("uc_vcard_outer_div");
        if (div) {
            var internalChangeSave = _changing;
            _changing = true;
            div.style.display = "none";
            _changing = internalChangeSave;
        }

        var text = ev.target.data.substring(0, 64); // Bad choice: target.data is partial info (before/after <wbr/>) if representing long email
        if (text.indexOf("@") <= 0) text = ev.target.parentElement.textContent.substring(0, 64); // Bad choice: inner text is not ready on first appearing of vcard
        if (text.indexOf("@") <= 0) text = ev.target.parentElement.innerHTML.substring(0, 64); // Bad choice: HTML junk
        if (text.indexOf("@") <= 0) return;

        // Allow nested updates (like "email" -> "email@domain." -> "email@domain.com") to complete
        setTimeout(function appendVcardButtonDelayed() {
            appendVcardButton.call(_this, null, affectedItem);
        }, 200);
    }

    function clickPhone(phone) {
        //alert("X" + phone); return;

        if (!phone || !phone.length || (phone.length == 0)) return;
        // sendRequest({ action: "dial", data: phone });
    }

    function filterPage() {
        var m = document.getElementsByTagName('meta');
        for (var i in m) {
            if (m[i].httpEquiv == "X-NoPhoneParse") return true;
        }
        return false;
    }

    var _timer;

    function findPhones(el, f, retry) {
        if (!f || _changing) {
            if (_timer) clearTimeout(_timer);
            return _timer = setTimeout(function _findPhones() {
                findPhones.call(_this, el, true, retry);
            }, 250);
        }

        if (filterPage()) return;

        //var f = "[\\+\\(]?[0-9]([ ]?[( \\-\\.]?[¶]?[0-9][)]?){4,15}";
        var f = "[\\+\\(]?[¶]?[0-9][¶]?([ ]?[¶]?[( \\-\\.]?[¶]?[0-9][¶]?[)]?[¶]?){4,14}[0-9]";
        _changing = true;
        el = document.documentElement;
        var r = $UC.DOMWalk.walkAndHighlight(el, f, filterPhones, function _clickPhone(phone) {
            clickPhone.call(_this, phone);
        });
        _changing = false;


        if (!retry && r) findPhones(el, false, true);
    }

    function isDigit(c) {
        return ("01234567890".indexOf(c) >= 0)
    }

    function isPhoneStart(c) {
        return ("+(01234567890".indexOf(c) >= 0)
    }

    function filterPhones(text, pre, pos) {
        var skipChars = 0;
        var skipEnd = 0;
        var digitsOnly = "";

        var spos = text.lastIndexOf(" ");

        for (var i = 0; i < text.length; i++) {
            var ch = text.substr(i, 1);
            skipChars = ((ch == "¶") && (i == 0)) ? skipChars + 1 : skipChars;
            skipEnd = ((ch == "¶") && (i == text.length - 1)) ? skipEnd + 1 : skipEnd;

            if (isDigit(ch)) digitsOnly += ch;
        }

        text = text.replace(/¶| |/g, "");

        if (text.length < 9)
            return false;
        if (digitsOnly.length < 7)
            return false;
        if ((" .:(".indexOf(pre) < 0) && (pre.charCodeAt(0) != 0xA7) && (pre.charCodeAt(0) != 0xA0) && (pre.charCodeAt(0) != 0x09))
            return false;
        if ((" .,)".indexOf(pos) < 0) && (pos.charCodeAt(0) != 0xA7) && (pos.charCodeAt(0) != 0xA0) && (pre.charCodeAt(0) != 0x09))
            return false;
        if (text.match(/(18|19|20)\d{2}\-(18|19|20)\d{2}\b/)) // if years range
            return false;
        if (text.match(/(18|19|20)\d{2}\-([0-1]\d)-([0-3]\d)\b/)) // if ISO date
            return false;
        if (text.match(/([0-3]\d)[\.\-]([0-3]\d)[\.\-](18|19|20)\d{2}\b/)) // just date
            return false;
        if (text.match(/\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b/)) // if IP address
            return false;
        if (text.match(/^\d*\.\d*$/)) // if numeric
            return false;
        if (text.match(/[\(\)\.\-][\(\)\.\-]/)) // two separators
            return false;

        // real phone check
        var r = $UC.PhoneParse.parse(text, _dialCountry, _dialArea, _dialShowAll);
        if (r.length == 0)
            return false;

        return {
            skip: skipChars,
            skipEnd: skipEnd,
            phone: text,
            label: _dialTooltip
        };
    }

    function onConfig() {
        bindDOMEvents(window.document, onDOMChanged, onDOMChangedVCard);
        // run search and replace
        findPhones(document.documentElement);
        // setUpdateTimer();
    }

    function setUpdateTimer() {
        _updateTimer = setTimeout(function _onUpdateTimer() {
            updateTimer.call(_this);
        }, 10000);
    }

    function updateTimer(response) {
        setUpdateTimer();
    }

    function sendRequest(o, f) {
        //if (!chrome || !chrome.extension) return;
        // chrome.extension.sendRequest(o, function $UC$ClickToDial$OnResult(r) { f && f.call(_this, r); });
    }

    function onLoad() {
        onConfig();
    }

    function envelopHandler(phone, available, fClick) {
        var el = document.createElement("span");
        el.style.display = "none";
        //el.style.color = ((available != undefined) && (!available)) ? 'red !important' : el.style.color;
        el.setAttribute("style", "color:" + (((available != undefined) && (!available)) ? 'red !important' : el.style.color));
        el.className = "cisco_jabber_outer";
        el.setAttribute("jabber_click_to_dial", "1");
        var bt = document.createElement("button");
        bt.className = "jabber_hotspot";
        bt.style.display = "none";
        bt.setAttribute("title", _dialTooltip);
        bt.addEventListener("mousedown", function _onClick(ev) {
            ev.preventDefault();
            ev.stopPropagation();
            fClick.call(_this, phone);
        }, true);
        el.appendChild(bt);
        el.appendChild(document.createTextNode(phone));
        _spotsPeople.push(bt);

        return el;
    }

    function processEmailsForContainers(emails, containers) {
        for (var ndx = 0; ndx < emails.length; ndx++) {
            if ($UC.DOMWalk.hasAttribute(containers[ndx], "ucext"))
                continue;
            containers[ndx].setAttribute("ucext", "1");

            var div = document.createElement('DIV');
            loadObjectWithUri(emails[ndx], div,
                function _onLookupPersonCompleted(result) {
                    onLookupPersonCompleted.call(_this, result, div);
                });
            containers[ndx].insertBefore(div, containers[ndx].children[1]);
        }
    }

    function onLookupPersonCompleted(result, tag) {
        if ((!result) || (!result.R) || (!result.R.length) || (!result.R[0].P) || (!result.R[0].P.length)) return;

        var isAvailable = true;
        if (result.R[0].A && (result.R[0].A.length == 1) && (result.R[0].A == "1")) isAvailable = false;

        var div = document.createElement("div");
        div.className = "aob";
        var div2 = document.createElement("div");
        var div3 = document.createElement("div");
        div2.appendChild(div3);
        div.appendChild(div2);
        for (var phoneNo = 0;
            (phoneNo < result.R[0].P.length); phoneNo++) {
            var el = envelopHandler(result.R[0].P[phoneNo], isAvailable, clickPhone);
            var elw = div2.cloneNode(true);
            elw.className = "an7";
            elw.firstChild.className = "anN";
            elw.firstChild.appendChild(el);
            div.appendChild(elw);
        }
        div2.className = "an7";
        div3.className = "an9";
        div3.appendChild(document.createTextNode(_phonesName));

        var internalChangeSave = _changing;
        _changing = true;
        tag.appendChild(div);
        _changing = internalChangeSave;
    }

    function checkEmail(emailToTest) {
        var indexSpace = emailToTest.indexOf(' ');
        if (indexSpace >= 0) return false;

        var indexAt = emailToTest.indexOf('@');
        if (indexAt < 1) return false;

        var indexDot = emailToTest.lastIndexOf('.');
        if (indexDot < indexAt) return false;

        return true;
    }

    function resolveEmail(person) {
        var els = document.getElementsByClassName("yP");
        for (var i = 0; i < els.length; i++) {
            if (els[i].nodeName != "SPAN") continue;
            if (!els[i].attributes['email']) continue;
            if (person != els[i].textContent) continue;
            return els[i].attributes['email'].value;
        }
        return false;
    }

    function onLookupVCardCompleted(result, div, email) {
        if (!result) return;
        if (!result.R) return;
        if (!result.R.length) return;
        if (!result.R[0].P) return;
        if (!result.R[0].P.length) return;

        var emailCur = div.getAttribute("email");
        if (emailCur != email) return; // too late

        var isAvailable = true;
        if (result.R[0].A && (result.R[0].A.length == 1) && (result.R[0].A == "1")) isAvailable = false;

        var phone = result.R[0].P[0];

        var internalChangeSave = _changing;
        _changing = true;

        div.setAttribute("phone", phone);
        div.setAttribute("style", "color:" + (isAvailable ? ";" : "red !important;"))
            //div.style.color = isAvailable ? "" : "red !important";
            //div.style.setProperty("color", isAvailable ? "" : "red !important");
        div.style.display = "";

        _changing = internalChangeSave;
    }

    function onLookupVCardV2Completed(result, divContainer, email) {
        if (!result) return;
        if (!result.R) return;
        if (!result.R.length) return;
        if (!result.R[0].P) return;
        if (!result.R[0].P.length) return;

        var isAvailable = true;
        if (result.R[0].A && (result.R[0].A.length == 1) && (result.R[0].A == "1")) isAvailable = false;

        var phone = result.R[0].P[0];

        var internalChangeSave = _changing;
        _changing = true;

        divContainer.setAttribute("ucext", "1");
        var div = document.createElement('DIV');

        div.setAttribute("id", "uc_vcard_outer_div");

        // New way
        div.className = 'Ie r6 xc a-f-e a-Pb-b Nk uccmmarker ucdpe_vcard_button2';
        div.setAttribute('role', 'button');
        div.setAttribute('email', email);
        div.setAttribute('title', _dialName);
        div.setAttribute('phone', phone);
        div.setAttribute('tabindex', '0');
    
        divContainer.appendChild(div);
        _spotsVCard.push(div);

        div.addEventListener("click", function _onClickVCard(e) {
            clickPhone.call(_this, div.getAttribute("phone"));
        });
      
        _changing = internalChangeSave;
    }

    function appendVcardButton(elementToolbar, divEmail) {
        var emailNew = "";
        if (divEmail && divEmail.textContent && checkEmail(divEmail.textContent))
            emailNew = divEmail.textContent;

        var div = null;

        var internalChangeSave = _changing;
        _changing = true;

        if (elementToolbar && (!$UC.DOMWalk.hasAttribute(elementToolbar, "ucext"))) {
            elementToolbar.setAttribute("ucext", "1");
            div = document.createElement('DIV');

            div.setAttribute("id", "uc_vcard_outer_div");
            div.className = "T-I J-J5-Ji nV T-I-ax7 L3 T-I-Js-Gs T-I-Js-IF uccmmarker";
            div.setAttribute("role", "button");
            div.setAttribute("email", "");
            div.setAttribute("phone", "");
            div.setAttribute("tabindex", "0");
            div.setAttribute("style", "-webkit-user-select: none; display:none;");
            div.innerHTML = "<img class=\"J-J5-Ji tw\" src=\"images/cleardot.gif\" alt=\"\">" + _dialName;

            if (elementToolbar.children.length > 1)
                elementToolbar.insertBefore(div, elementToolbar.children[1]);
            else
                elementToolbar.appendChild(div);

            div.addEventListener("mousedown", function _onClickVCard(e) {
                clickPhone.call(_this, div.getAttribute("phone"));
            });
        } else {
            div = document.getElementById("uc_vcard_outer_div");
        }

        if (!div || !divEmail) return _changing = internalChangeSave;

        var emailOld = div.getAttribute("email");
        if ((emailOld == emailNew) || (emailNew.length == 0)) {
            if (emailOld == emailNew) div.style.display = "";
            return _changing = internalChangeSave;
        }

        div.setAttribute("email", emailNew);
        div.setAttribute("phone", "");
        div.style.display = "none";

        loadObjectWithUri(emailNew, null,
            function _onLookupVCardCompleted(result) {
                onLookupVCardCompleted.call(_this, result, div, emailNew);
            });

        _changing = internalChangeSave;
    }

    function getMailboxId(c) {
        sendRequest({
            action: "c:mbxid"
        }, function onGetMailboxId(response) {
            _dialCountry = response.country;
            _dialArea = response.area;
            _dialShowAll = response.show;
            _server = response.server;
            if (c) c(response.mbxId ? response.mbxId : -1, response.proto);
        });
    }

    function loadObjectWithUri(email, tag, callback, mbxid, proto) {
        if (!mbxid)
            return getMailboxId(function _loadObjectWithUri(_mbxid, proto) {
                loadObjectWithUri.call(_this, email, tag, callback, _mbxid, proto);
            });

        if (mbxid == -1)
            return callback(null, tag);

        var method = "POST";
        var postData = "addresses=" + email;
        var uri = "/ucwebaccess/uc.asmx/LookupAddresses?out=json";
        if (proto == "80") {
            method = "GET";
            postData = null;
            uri = "/ucgateway/ucdpe.aspx?lookup=" + email + "&mailboxId=" + mbxid;
        }
        sendRequest({
            action: 'httpreq',
            uri: uri,
            method: method,
            postData: postData
        }, function(response) {
            if (response.succeeded) {
                var result = null;
                try {
                    result = JSON.parse(response.responseText);
                    if (proto != "80")
                        result = JSON.parse(result.Lookup);
                } catch (exFetch) {
                    result = null;
                    console.log('loadObjectWithUri Cannot fetch: ' + exFetch.toString());
                }
                callback(result, tag);
            } else {
                var errMsg = response.errorText;
                if (!errMsg) errMsg = '[' + response + '] Cannot load ' + uri;
                console.log('loadObjectWithUri() Err: ' + errMsg);
                return callback(null, tag);
            }
        });
    }

    function collectCandidateNodes(e) // MutationEvent e;
        {
            if (_changing) return;

            var els, email;
            var affectedItem = e.target;
            if (affectedItem.nodeType != 1) return;
            if (affectedItem.nodeName == 'HEAD') return;
            if (affectedItem.nodeName == 'SCRIPT') return;

            var rootElement = null;
            var emails = [];
            var containers = [];

            // lookup by name
            if ((affectedItem.nodeName == 'TD') && (affectedItem.className == 'anQ') && (affectedItem.children.length == 1) && $UC.DOMWalk.hasAttribute(affectedItem.children[0], 'title')) {
                var personName = affectedItem.children[0].attributes['title'].value;
                if ((personName.length > 0) && (email = resolveEmail(personName))) {
                    var emailsTmp = [];
                    var containersTmp = [];

                    var container = affectedItem.parentElement.parentElement.parentElement.parentElement.parentElement;

                    emailsTmp.push(email);
                    containersTmp.push(container);

                    // Wait for all other possible ways!
                    console.log('Delayed lookup for ' + personName + ' (resolved to email ' + email + ') scheduled');
                    setTimeout(function processEmailsForContainersDelayed() {
                        if ($UC.DOMWalk.hasAttribute(containersTmp[0], 'ucext'))
                            return console.log('Delayed lookup cancelled: ' + emailsTmp[0]);

                        console.log('Delayed lookup: ' + emailsTmp[0]);
                        processEmailsForContainers.call(_this, emailsTmp, containersTmp);
                    }, 500);
                }
            } else if ((affectedItem.nodeName == 'IMG') && ($UC.DOMWalk.hasAttribute(affectedItem, 'jid'))) {
                if (affectedItem.parentElement.nodeName == 'DIV') {
                    var td = affectedItem.parentElement.parentElement;
                    if ((td.nodeName == 'TD') && ($UC.DOMWalk.hasClass(td, 'anS'))) {
                        var email = affectedItem.attributes['jid'].value;
                        if (email && checkEmail(email)) {
                            emails.push(email);
                            containers.push(affectedItem.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement); // 7
                            if (rootElement == null) rootElement = affectedItem.parentElement.parentElement.parentElement.parentElement; // 4
                        }
                    }
                }
            } else if ((e.type == 'DOMNodeInsertedIntoDocument') && (affectedItem.className == 'Dv Ie') && (affectedItem.nodeName == 'DIV') && (affectedItem.parentElement.nodeName == 'DIV') && (affectedItem.parentElement.parentElement.nodeName == 'DIV') && (affectedItem.parentElement.parentElement.children.length > 1) && (affectedItem.parentElement.parentElement.children[0].className == 'Rt') && (els = affectedItem.parentElement.parentElement.children[0].getElementsByClassName("nNa")) && (els.length == 1) && (email = els[0].textContent) && (email.indexOf('@') > 0)) {
                loadObjectWithUri(email, null,
                    function _onLookupVCardV2Completed(result) {
                        onLookupVCardV2Completed.call(_this, result, affectedItem, email);
                    });
            } else if ((affectedItem.className == 'T-I J-J5-Ji nV T-I-ax7 L3') && (e.type == 'DOMNodeInsertedIntoDocument')) {
                if ($UC.DOMWalk.hasClass(affectedItem.parentElement.parentElement, 'amd') && $UC.DOMWalk.hasClass(affectedItem.parentElement.parentElement.parentElement.parentElement, 'SK') && $UC.DOMWalk.hasClass(affectedItem.parentElement.parentElement.parentElement.parentElement.parentElement, 'tq')) {
                    appendVcardButton(affectedItem.parentElement);
                }
            } else if ((affectedItem.className == 'tq') && (affectedItem.nodeName == 'DIV')) {
                var elementsVcard = $UC.DOMWalk.domSelect(affectedItem, [{
                    name: 'DIV',
                    className: 'SK'
                }, {
                    name: 'DIV',
                    className: 't6'
                }, {
                    name: 'DIV',
                    className: 'amd'
                }, {
                    name: 'DIV',
                    className: ''
                }]);
                if (elementsVcard.length) appendVcardButton(elementsVcard[0]);
            } else if ((affectedItem.className == 'anO anN') && (affectedItem.nodeName == 'TD')) {
                if ($UC.DOMWalk.hasAttribute(affectedItem, 'dir', 'ltr')) {
                    var elementsSpan = $UC.DOMWalk.domSelect(affectedItem, [{
                        name: 'SPAN',
                        className: ''
                    }]);
                    for (var i = 0; i < elementsSpan.length; i++) {
                        var email = elementsSpan[i].title;
                        if (!email || !checkEmail(email)) continue;

                        emails.push(email);
                        containers.push(elementsSpan[i].parentElement.parentElement.parentElement.parentElement.parentElement.parentElement); // 6
                        if (rootElement == null) rootElement = elementsSpan[i].parentElement.parentElement.parentElement; // 3
                    }
                }
            } else if ((affectedItem.className == "nH anT") && (affectedItem.nodeName == 'DIV')) {
                var elementsSpan = $UC.DOMWalk.domSelect(affectedItem, [{
                    name: 'DIV',
                    className: 'nH'
                }, {
                    name: 'DIV',
                    className: 'anr'
                }, {
                    name: 'DIV',
                    className: 'anL'
                }, {
                    name: 'TABLE',
                    className: ''
                }, {
                    name: 'TBODY',
                    className: ''
                }, {
                    name: 'TR',
                    className: ''
                }, {
                    name: 'TD',
                    className: 'anO'
                }, {
                    name: 'SPAN',
                    className: ''
                }]);

                for (var i = 0; i < elementsSpan.length; i++) {
                    var email = elementsSpan[i].title;
                    if (!email || !checkEmail(email)) continue;
                    emails.push(email);
                    containers.push(elementsSpan[i].parentElement.parentElement.parentElement.parentElement.parentElement.parentElement); // 6
                    if (rootElement == null) rootElement = elementsSpan[i].parentElement.parentElement.parentElement; // 3
                }
                // -> DIV nH -> [DIV anr] -> DIV anL [anP] -> TABLE cf an5 -> TBODY -> TR -> TD anO anN dir=ltr -> SPAN title="e@ma.il">e@ma.il<
                //                                                                           TD anS -> DIV anR s81UUe -> IMG jid="e@ma.il"
                var elementsImg = $UC.DOMWalk.domSelect(affectedItem, [{
                    name: 'DIV',
                    className: 'nH'
                }, {
                    name: 'DIV',
                    className: 'anr'
                }, {
                    name: 'DIV',
                    className: 'anL'
                }, {
                    name: 'TABLE',
                    className: ''
                }, {
                    name: 'TBODY',
                    className: ''
                }, {
                    name: 'TR',
                    className: ''
                }, {
                    name: 'TD',
                    className: 'anS'
                }, {
                    name: 'DIV',
                    className: 'anR'
                }, {
                    name: 'IMG',
                    className: ''
                }]);

                for (var j = 0; j < elementsImg.length; j++) {
                    if (!elementsImg[j].attributes) continue;
                    if (!elementsImg[j].attributes['jid']) continue;
                    var email = elementsImg[j].attributes['jid'].value;
                    if (!email || !checkEmail(email)) continue;
                    emails.push(email);
                    containers.push(elementsImg[j].parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement); // 7
                    if (rootElement == null) rootElement = elementsImg[j].parentElement.parentElement.parentElement.parentElement; // 4
                }
            }

            processEmailsForContainers(emails, containers);
        }

        function init() {
            window.addEventListener("load", function() {
                onLoad.call(_this);
            }, true);
        }
        init();
    }
}
